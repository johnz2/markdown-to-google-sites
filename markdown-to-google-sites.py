# Author: john jensen (john@z2live.com)

import sys
import getopt
import glob
from os import path

import codecs
import unicodedata
import markdown


from markdown.util import etree

#
# markdown processing extension
#

class ReplaceCodeBlocksTreeprocessor(markdown.treeprocessors.Treeprocessor):
    """ Replace <pre><code> blocks with additional HTML to help Google Sites
        apply its "Blockquote Code" style." """
    def run(self, root):
        self.replace_code_blogs(root)
        return root

    def replace_code_blogs(self, element):
        blocks = element.getiterator('pre')
        for block in blocks:
            children = block.getchildren()
            if len(children) == 1 and children[0].tag == 'code':
                code_element = children[0] 
                block.remove(children[0])
                
                div = etree.SubElement(block, "div")
                div.set("class", "sites-codeblock sites-codesnippet-block")
                
                div.append(code_element)

class GoogleSitesExtension(markdown.Extension):
    """ Markdown extension to Google Sites-ify certain syntax. """
    def __init__(self, *args, **configs):
        # define default configs
        self.config = {
            'replace_code_blocks' : [True,
                "Replace <pre><code> with someone more Google Sites-friendly."]
            }
        # Override defaults with user settings
        for key, value in configs.items():
            self.setConfig(key, value)

    def extendMarkdown(self, md, md_globals):
        # Insert a tree-processor that adds the configured CSS class to P tags
        if self.getConfig('replace_code_blocks'):
            replace_code_blocks     = ReplaceCodeBlocksTreeprocessor(md)
            replace_code_blocks.ext = self
            md.treeprocessors.add('replace_code_blocks', replace_code_blocks, '_end')

#
# markdown_to_google_sites_entry
#

def markdown_to_google_sites_entry(input_filename, debugging=False):
    markdown_to_google_sites(input_filename, verbose_output=debugging,
                            print_markdown_html=debugging)


#
# markdown_to_google_sites
#

def markdown_to_google_sites(input_filename, print_markdown_html=False,
        prepend_notice_to_html=False, script_output_verbose=False,
        script_output_in_ascii=True,
        script_output_banner_string="[markdown-to-google-sites] "):
    
    # used if prepend_notice_to_html is True
    markdown_to_gsites_notice = "<!-- This HTML was autogenerated by \
        markdown-to-google-sites.py -->\n\n"
    
    def script_print(print_string, verbose=False, is_html_output=False,
                     show_banner=True):

        def clean_string_to_ascii(string):
            return unicodedata.normalize('NFKD', string).encode('ascii',
                'ignore')
        
        do_ascii_convert = script_output_in_ascii
        if type(print_string) is str:
            do_ascii_convert = False
        
        if do_ascii_convert:
            output_string = clean_string_to_ascii(print_string)
        else:
            output_string = print_string
        
        if not print_markdown_html or is_html_output:
            if not verbose or script_output_verbose:
                if show_banner:
                    print("{0}{1}".format(script_output_banner_string, output_string))
                else:
                    print(output_string)

    def read_file_into_html(filename):
        # load file
        input_file = codecs.open(filename, mode="r", encoding="utf-8")
        text       = input_file.read()

        # convert text to html
        googlesites_ext = GoogleSitesExtension(replace_code_blocks=True)
        html            = markdown.markdown(text, extensions=[googlesites_ext])
    
        if prepend_notice_to_html:
            html = markdown_to_gsites_notice + html
            
        return html
       
    # get html
    for filename in glob.glob(input_filename):
        script_print("reading {0}...".format(filename))
        html = read_file_into_html(filename)
    
        if print_markdown_html:
            script_print(html, show_banner=False, is_html_output=True)

        script_print("successfully converted to html...")

        # todo: upload to google sites
        script_print("todo: upload to google sites!")
    
        #
        script_print("done!")

        save_name = path.splitext(filename)[0]
        save_file = codecs.open(save_name+'.html', mode='w', encoding='utf-8')
        save_file.write(html)
        save_file.close()

    return 1

class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg

def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(argv[1:], "h", ["help"])

            return markdown_to_google_sites(path.join("files","*.md"), False)
        except getopt.error, msg:
             raise Usage(msg)
        # more code, unchanged
    except Usage, err:
        print >>sys.stderr, err.msg
        print >>sys.stderr, "for help use --help"
        return 2

if __name__ == "__main__":
    sys.exit(main())
    
